* Questionnaire

1. First, please tell us a little about yourself. 
 1a. What do you do and what is your technical background?
 1b. On a scale of 1-10, how would you categorize your expertise in this subject? (1 = none, 10 = expert)
 1c. Did you read the entire review package? If not, which chapters did you read?

2. Imagine that you’re writing a review for this book on Amazon…
 2a. How many stars would you give it? 
 2b. What would you say? 
 2c. What would the authors need to change to get 5 stars?

3. Please comment on the manuscript.
 3a. Is the writing interesting? Does it hold your attention?
 3b. Were there passages that required repeated reading to understand? If so, which ones?
 3c. Are there any figures\screenshots which don’t make sense to you or could be captioned\annotated better to clarify what they are showing?
 3d. Are the examples good and applicable in real world? Are there enough of them?
 3e. Do you recommend any improvements to the Table of Contents?
 3f. Are any parts of the manuscript too long, too short or missing?
 3g. Does the book make learning the subject easy?
 3h. Did you actually learn to do anything after reading these chapters? What?
 3i. Did you gain any new techniques, insights or perspectives?
 3j. How much value is there in this book compared to free online resources?
 3k. Did you have any “aha!” moments while reading this manuscript?

4. We often provide examples for two reasons – to help learn the topic and as illustrations of real-world code. Please consider thoroughly running the code. This is a vital part of the manuscript review - we need your opinion on both text and code.
 4a. How many of the source code examples did you compile and run? If none, why?
 4b. Did the code examples help you learn the material?
 4c. Are the examples nicely explained?
 4d. Were there any examples that were helpful in real-world situations?

5. Wrap up.
 5a. Is there a market for this topic?
 5b. What other topics would you like to see books published on? 
 5c. Can you name some technology experts (perhaps lesser known) who you think would make good authors?
 5d. To help get the word out about our books, we often convert sections of books into articles published on the Web. Which sections in this manuscript would make interesting or useful articles?
 5e. Occasionally we use quotes in promotional material. May we use a quote from your review with or without your name for these promotions?

* Chapter 0

Page 1: features are not always known. Sometimes some of them are unknown, and get predicted (i.e. online systems).

If the book is more about implementing successful ML systems, using Reactive technologies, maybe it should be stresses more.

** Concepts
Probably the concepts are introduced too fast. I think it would be better if the author describes a typical machine learning system from the outside, defining the concepts based on that example.
The reader probably won't go back frequently to chapter 0 to clarify terminology. And in that case, the reader could be overwhelmed for nothing.

** Ready or not
This section is fine. However, the content helps clarifying what the reader needs to known, but it doesn't anticipate what will be the reward. The reader will probably want to know what she will be able to do after reading the book.

* Chapter 1

** An example machine learning system

Great chapter, since it allows the reader to follow an approach that seemed reasonable, and helps him discover the problems afterwards.

Page 9: Is Figure 1.5 / LibSVM actually Figure 4? Is it helpful to mention LibSVM here?

Last paragraph of Machine Learning section is great.

** When not to use reactive machine learning

The last paragraph came unexpected to me. After the Coursera Machine Learning course, we were taught to build prototypes before attempting to implement a real ML system.
I assume there will be a number of readers with the same background. While I see the point of suggesting not following the reactive path when building temporary ML systems,
does that mean that this book makes sense when you have already built a prototype, and are thinking of building a real ML application?

I think it would be interesting to show a simple SWOT or recipe diagram, e.g.:

| scope                   | Target system | Technologies                              |
|-------------------------+---------------+-------------------------------------------|
| learning about the data | prototype     | Octave, Matlab, R, Weka, ...              |
| Building a ML system    | production    | Home-grown, reactive-based implementation |

** Summary

There's a bullet enumerating the 5 components of a ML system, but they're not explained in chapter 1.

* Chapter 2

*** Listing 2.3

In Listing 2.3, I got an unexpected result, probably due to misunderstanding on my part.
I wanted to test the method Map.withDefaultValue(), but I got an unexpected result.
Here's my code:

#+BEGIN_SRC java
object HelloWorld {

   val totalVotes = Map("Mickey" -> 52, "nom nom" -> 105)
   val totalVotesWithDefault = Map("Mikey" -> 52, "nom nom" -> 105).withDefaultValue(-1)
   val naiveNomNomVotes: Option[Int] = totalVotesWithDefault.get("nom nom")

   def getVotes(howler: String) = {
       totalVotesWithDefault.get(howler) match {
           case Some(votes) => votes
           case None => 0
       }
   }

   def main(args: Array[String]) {
      val nomNomVotes: Int = getVotes("nom nom")
      val indianaVotes: Int = getVotes("Indiana")
      println(nomNomVotes)
      println(indianaVotes)
   }
}
#+END_SRC

Instead of 105, -1, it prints 105, 0.

*** Listing 2.4

In listing 2.4, I got an issue as well, probably because I was using an online editor (https://www.tutorialspoint.com/compile_scala_online.php):
The compiler didn't accept calling the static method "nextInt" directly, so I had to instantiate a new Random instance.

#+BEGIN_SRC java
       Thread.sleep(new java.util.Random().nextInt(1000))
#+END_SRC

instead of

#+BEGIN_SRC java
       Thread.sleep(Random.nextInt(1000))
#+END_SRC

*** Listing 2.5

I had to use a Thread.sleep(1000) in order to see the "The top dog currently has ...".
Keep in mind the message is not formatted correctly (it says "The tog dog currently has105votes.").

The text points out using futures provides benefits in terms of scaling, but I think it's not the
key point of using futures. Instead, it's simplifying writing asynchronous code, making it seem synchronous, and leveraging multi-core architectures.
But it's not really the silver bullet of scaling. You'll probably need to check how many concurrent threads are spawned, and for how long they live.

*** Listing 2.6

Again, it's probably my fault, but I get a compile error. Here's the code I was trying to compile:

#+BEGIN_SRC java
import scala.concurrent._
import ExecutionContext.Implicits.global

object HelloWorld {

   val totalVotesWithDefault = Map("Mikey" -> 52, "nom nom" -> 105).withDefaultValue(0)

   def getRemoteVotes(howler: String) = {
       Thread.sleep(new java.util.Random().nextInt(1000))
       totalVotesWithDefault(howler)
   }

   def futureRemoteVotes(howler: String) = Future {
       getRemoteVotes(howler)
   }


   val timeoutDuration = 500
   val AverageVotes = 42

   val defaultVotes = Future {
       Thread.sleep(timeoutDuration)
       AverageVotes
   }

   def timeoutVotes(howler: String) = Future.firstCompletedOf(
         List(getRemoteVotes(howler), defaultVotes))

   def main(args: Array[String]) {

     val nomNomFutureVotes = futureRemoteVotes("nom nom")
     val mikeyFutureVotes = futureRemoteVotes("Mikey")
     val indianaFutureVotes = futureRemoteVotes("Indiana")

     val topDogVotes: Future[Int] = for {
       nomNom <- nomNomFutureVotes
       mikey <- mikeyFutureVotes
       indiana <- indianaFutureVotes
     } yield List(nomNom, mikey, indiana).max

     topDogVotes onSuccess {
       case _ => println("The top dog currently has " + topDogVotes + " votes")
     }

     Thread.sleep(10000)
  }
}
#+END_SRC

The error I get is

#+BEGIN_SRC shell
sh-4.3$ scalac *.scala
HelloWorld.scala:27: error: type mismatch;
 found   : List[Any]
 required: TraversableOnce[scala.concurrent.Future[?]]
         List(getRemoteVotes(howler), defaultVotes))
#+END_SRC

*** Listing 2.7

I had to explicitly qualify "mutable" as "scala.collection.mutable" when creating the HashMap.

*** Listing 2.9

I had to qualify "Actor" as "akka.actor.Actor".

*** Listing 2.13

It seems the training files are available from a repository, but it doesn't mention Appendix A.

In page 26, I think the difference between training set and test samples is not clear enough.
Particularly, the reader might not know which data could be used for testing instead of training the system.

* Chapter 3

In general, I liked the storytelling: describing the problem, proposing a typical solution, describing why it doesn't fit, and proposing an alternate approach.

However, once the synchronous solution is discarded, the solution proposed is like: let's see what databases are out there and which characteristics can be helpful in this context.
I'd find more rigorous to use a scientific approach. Each step, from data gathering to data consumption, analyze the same set of facts: does it scale? does it lose information? Were are the bottlenecks, if any?
It'd be the same story, but without the sense of "I'd probably would choose another option at first". In other words, what if the reader is not familiar with reactive concepts and products? What if
the reader doesn't know he doesn't know? In that case, proposing Couchbase out of the blue is probably something he won't do, because his experience won't guide him towards that path.
Not to mention if he works for a corporation and proposing Couchbase would mean a fight ahead.

As a side note, in the source code examples I'd reword the "Readings" variables, because most of the chapter involves actually *writing* them. Maybe using "Samples" or "Examples" would avoid any potential confusion.

* Chapter 4

In general, the chapter is several things at once:
- Introduction to chapter 5.
- Advises on how to face common challenges when dealing with features.
- Source code samples used to address issues related with features, showing some helpful Scala idioms.

I've had some problems trying to following the author. I found myself thinking where I was in the whole picture of the book.
Chapter 3 was great because the problem was easy to understand, and the solution was easy to follow. The storyline was clear.
This chapter is an information transfer, not a knowledge transfer. The reader cannot do much more than not get lost, and remind himself to get back to that chapter in the future, once he faces the issues the chapter describes.
In particular, I'd leverage the chapter to make sure the reader knows what features are all about. I'd mention the problem of underfitting and overfitting. I had problems to see how I could choose features without analyzing the performance and accuracy of the ML system. I think that concerns could be addressed briefly.
It would help also to recall where we are in the journey towards building a ML system. I liked the summary, because I was aware again of why this chapter was necessary. Meanwhile, while the content was interesting, I think I was missing the point all too frequently.

* Chapter 5

This chapter is a journey on some modeling approaches. It's useful since it gives the reader a way to start trying them out. However, I don't think the reader would anticipate where to use which. They are compared only in vague adjectives such as simple vs sophisticated.
This is an example of where the "art" of ML lies.

Additionally, I found the chapter somewhat irrespectful regarding the scientific knowledge underneath. The reader will need to overcome problems with his model, and the book does not help him classify them and point him to possible solutions.
Also, I missed some remark on offline-vs-online systems (one that uses each new sample to learn, vs one that cannot afford that and just uses the offline training set alone).

* Chapter 6

This chapter is about "Anomaly detection" systems, but I think it's not sufficiently remarked. It serves a different purpose than other ML approaches.
I liked the way the ROC curve is described: a simple way to figure out the performance of the ML system.

However, there's no mention of problems related to underfitting or overfitting, and thus no counter-measures (reducing/increasing the number of features, using regularization, etc.). I liked the part on the problems of leakage of test data into the training set.

* Chapter 7

In a book called "Reactive Machine Learning", why the author recommends to use Akka HTTP? I'd expect a reactive approach, based on asynchronous messages, using a queue in between. Maybe the author could add a brief explanation should the reader asks himself the same question.

The author suggests to review Appendix A to find out more about Docker, but that appendix currently does not mention Docker.

In listing 7.14, when constructing the Dockerfile, I would mention that the reader should do some checks on the locale and encoding provided to the JVM. Sometimes wrapping a jar file in a Docker image could be not enough.

* Chapter 8

In Listing 8.8, I find confusing why both Models.modelA and Models.modelB get mounted on the same url (/models), or even what that url is for.

Figures 2, 3, 4 are broken.

The section "Architecting Action" could probably be longer, and give more reasons in favor to adding that extra complexity into the architecture.
